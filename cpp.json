{
	"C++ Snippet": {
		"prefix": "code",
		"body": [
			"#pragma GCC optimize(\"Ofast\")",
			"#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma\")",
			"#pragma GCC optimize(\"unroll-loops\")",
			"#include <bits/stdc++.h> ",
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <complex>",
			"#include <queue>",
			"#include <set>",
			"#include <unordered_set>",
			"#include <list>",
			"#include <chrono>",
			"#include <random>",
			"#include <iostream>",
			"#include <algorithm>",
			"#include <cmath>",
			"#include <string>",
			"#include <vector>",
			"#include <map>",
			"#include <unordered_map>",
			"#include <stack>",
			"#include <iomanip>",
			"#include <fstream>",
			" ",
			"using namespace std;",
			"using namespace __gnu_pbds;",
			" ",
			"typedef long long ll;",
			"typedef long double ld;",
			"typedef pair<int,int> p32;",
			"typedef pair<ll,ll> p64;",
			"typedef pair<double,double> pdd;",
			"typedef vector<ll> v64;",
			"typedef vector<int> v32;",
			"typedef vector<char> vchar;",
			"typedef vector<bool> vbool;",
			"typedef vector<vector<int> > vv32;",
			"typedef vector<vector<ll> > vv64;",
			"typedef vector<vector<p64> > vvp64;",
			"typedef vector<vector<char> > vvchar;",
			"typedef vector<vector<bool> > vvbool;",
			"typedef vector<p64> vp64;",
			"typedef vector<p32> vp32;",
			"ll M = 1000000007;",
			"double eps = 1e-12;",
			"#define forn(i,e) for(ll i = 0; i < e; i++)",
			"#define forsn(i,s,e) for(ll i = s; i < e; i++)",
			"#define rforn(i,s) for(ll i = s; i >= 0; i--)",
			"#define rforsn(i,s,e) for(ll i = s; i >= e; i--)",
			"#define ln \"\\n\"",
			"#define dbg(x) cout<<#x<<\" = \"<<x<<ln",
			"#define mp make_pair",
			"#define pb push_back",
			"#define fi first",
			"#define se second",
			"#define INF 2e18",
			"#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)",
			"#define all(x) (x).begin(), (x).end()",
			"#define sz(x) ((ll)(x).size())",
			"typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds;",
			"/*",
			"pbds arr;",
			"pbds.insert(value);",
			"cout<<*arr.find_by_order(k)<<endl;->(k+1)Th largerst element (0-based Indexing) 1 2 5 -> (2)--> 5",
			"cout<<arr.order_of_key(5)<<endl;->number of elements strictly smaller than k",
			"Time Complexity ->O(logn)",
			"memset(arr,-1,sizeof(arr))->value 0 and -1 only (take value as unsigned char)",
			"fill(arr,arr+size;val)->any value we want",
			"*/",
			" ",
			"",
			"v32 d4x = {-1, 0, 0, 1}, d4y = {0, 1, -1, 0};",
			"v32 d8x = {-1, -1, -1, 0, 0, 1, 1, 1}, d8y = {-1, 0, 1, -1, 1, -1, 0, 1};",
			"",
			"ll gcd(ll a, ll b)",
			"{",
			"return b == 0 ? a : gcd(b, a % b);",
			"}",
			"",
			"ll fastModuloExp(ll x, ll n)",
			"{",
			"ll res = 1;",
			"while (n)",
			"{",
			"if (n & 1)",
			"{",
			"res = ((res % M) * (x % M)) % M;",
			"}",
			"x = ((x % M) * (x % M)) % M;",
			"n = n >> 1;",
			"}",
			"return res;",
			"}",
			"",
			"ll binomial(ll n, ll k)",
			"{",
			"if (k == 0 || k == n)",
			"    return 1;",
			"if (k > n - k)",
			"    k = n - k;",
			"ll ans = 1;",
			"for (ll i = k + 1; i <= n; i++)",
			"{",
			"    ans *= (i);",
			"    ans /= (n - i + 1);",
			"}",
			"return ans;",
			"}",
			"",
			"ll fibonacci(ll n)",
			"{",
			"map<ll, ll> mp;",
			"mp[0] = 0, mp[1] = 1;",
			"if (mp.find(n) != mp.end())",
			"{",
			"return mp[n];",
			"}",
			"ll k = n / 2;",
			"if (n % 2 == 0)",
			"{",
			"return mp[n] = ((fibonacci(k) * fibonacci(k)) + (fibonacci(k - 1) * fibonacci(k - 1))) % M;",
			"}",
			"else",
			"{",
			"mp[n] = ((fibonacci(k) * fibonacci(k + 1)) + (fibonacci(k - 1) * fibonacci(k))) % M;",
			"}",
			"}",
			"",
			"void solve(){",
			"}",
			"int main()",
			"{",
			" fast_cin();",
			" ll t;",
			" cin >> t;",
			" for(int it=1;it<=t;it++) {",
			"solve();",
			" }",
			" return 0;",
			"}"
		],
		"description": "C++ Snippet"
	}
}